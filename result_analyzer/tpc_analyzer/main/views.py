# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import os

from django.shortcuts import render

# Create your views here.
from result_analyzer.tpc_analyzer.tpc_analyzer.settings import charts, results

from results_scripts.report_generator import list_runs, parse_run_info
from results_scripts.settings import html_base


def get_runs_info():
    files_in_result_folder = os.listdir(results)
    runs_folders = []
    for f in files_in_result_folder:
        try:
            i = int(f)
            runs_folders.append(f)
        except ValueError:
            continue
    runs_folders.sort()
    runs_dirs = filter(os.path.isdir, [results + os.sep + x for x in runs_folders])
    runs = []
    for rf in runs_dirs:
        run_info = parse_run_info(rf)
        if run_info:
            link = get_run_url(run_info["rn"])
            if link:
                run_info["link"] = link
            runs.append(run_info)
    return runs

def get_run_url(rn):
    """
    Get the external run page that is generated by the report generator
    :param rn: run number
    :return:
    """
    run_chart_folder_dirname = "run_{}".format(rn)
    run_chart_folder = charts + os.sep + run_chart_folder_dirname
    if os.path.exists(run_chart_folder) and os.path.isdir(run_chart_folder):
        return html_base + os.sep + run_chart_folder_dirname + os.sep + "index.html"
    else:
        return None


def index(request):
    context= {"num_runs": len(runs)}
    return render(request, 'main/index.html', context)

def summary(request):
    runs = get_runs_info()
    context= {"runs": runs}
    return render(request, 'main/summary.html', context)

if __name__ == '__main__':
    get_runs_info()